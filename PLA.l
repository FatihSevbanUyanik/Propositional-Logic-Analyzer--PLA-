%option yylineno
/* definitions */
digit        [0-9]
signs        [+-]
integer      {signs}?{digit}+
double       {signs}?{digit}*(\.)?{digit}+
string       \"[^\"]*\"
character    {digit}|[A-Za-z]
comment      \/\*.*\*\/
identifier   [A-Za-z]{character}*
%% 
true|false          return(BOOLEAN);
{integer}           return(INTEGER);
{double}            return(DOUBLE);
{string}            return(STRING);
{comment}           return(COMMENT);
\$                  return(NUM_INDICATOR);
if                  return(IF);
else                return(ELSE);
while               return(WHILE);
for                 return(FOR);
return              return(RETURN);
\(                  return(LP);
\)                  return(RP);
\[                  return(LSB);
\]                  return(RSB);
\{                  return(LCB);
\}                  return(RCB);
\!                  return(EXCLAMATION);
\,                  return(COMMA);
\+                  return(PLUS);
\-                  return(MINUS);
\/                  return(DIVISION);
\*                  return(MULTIPLICATION);
\|                  return(OR);
\&                  return(AND);
\~                  return(NOT);
\~\|                return(NOR);
\~\&                return(NAND);
\|\~\|              return(XOR);
\=\>                return(IMPLICATION);
\<\=\=\>            return(IF_AND_ONLY_IF);
\<                  return(LESS_THAN);
\<\=                return(LESS_THAN_EQ);
\>                  return(GREATER_THAN);
\>\=                return(GREATER_THAN_EQ);
predicate           return(PREDICATE);
\:\:                return(PREDICATE_CALLER);
\:                  return(COLON);
print               return(PRINT);
println             return(PRINTLN); 
var_logic           return(VARIABLE_LOGIC);
val_logic           return(CONSTANT_LOGIC);
var_num             return(VARIABLE_NUMERIC);
val_num             return(CONSTANT_NUMERIC);
var_string          return(VARIABLE_STRING);
val_string          return(CONSTANT_STRING);
var_list            return(VARIABLE_LIST);
val_list            return(CONSTANT_LIST);
input\<\<           return(INPUT);  
{identifier}        return(IDENTIFIER);                       
\;                  return(SEMICOLON);
\=\=                return(EQUALITY_OP);
\!\=                return(NON_EQUALITY_OP);
\=                  return(ASSIGNMENT);
[ \t\n]             ;
%%
int yywrap() { return 1; }
